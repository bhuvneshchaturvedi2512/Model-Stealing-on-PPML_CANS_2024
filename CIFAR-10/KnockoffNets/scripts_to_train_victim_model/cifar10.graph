 %0 = _inp_1                                                                                                           # EncryptedTensor<int8, shape=(1, 3, 32, 32)>           ∈ [-128, 127]
 %1 = [[[[ 1 -1  ...  -1  1]]]]                                                                                        # ClearTensor<int2, shape=(64, 3, 3, 3)>                ∈ [-1, 1]              @ /conv_features.1/Conv.conv
 %2 = conv2d(%0, %1, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int13, shape=(1, 64, 30, 30)>         ∈ [-3060, 3060]        @ /conv_features.1/Conv.conv
 %3 = round_bit_pattern(%2, lsbs_to_remove=7)                                                                          # EncryptedTensor<int13, shape=(1, 64, 30, 30)>         ∈ [-3072, 3072]        @ /conv_features.1/Conv.conv_rounding
 %4 = subgraph(%3)                                                                                                     # EncryptedTensor<int2, shape=(1, 64, 30, 30)>          ∈ [-1, 1]
 %5 = [[[[-1  1  ...   0 -1]]]]                                                                                        # ClearTensor<int2, shape=(64, 64, 3, 3)>               ∈ [-1, 1]              @ /conv_features.4/Conv.conv
 %6 = conv2d(%4, %5, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)          # EncryptedTensor<int10, shape=(1, 64, 28, 28)>         ∈ [-249, 263]          @ /conv_features.4/Conv.conv
 %7 = round_bit_pattern(%6, lsbs_to_remove=4)                                                                          # EncryptedTensor<int10, shape=(1, 64, 28, 28)>         ∈ [-256, 256]          @ /conv_features.4/Conv.conv_rounding
 %8 = subgraph(%7)                                                                                                     # EncryptedTensor<int2, shape=(1, 64, 28, 28)>          ∈ [-1, 1]
 %9 = [[[[1 1]   ...   [1 1]]]]                                                                                        # ClearTensor<uint1, shape=(64, 64, 2, 2)>              ∈ [0, 1]               @ /conv_features.7/AveragePool.avgpool
%10 = conv2d(%8, %9, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)          # EncryptedTensor<int4, shape=(1, 64, 14, 14)>          ∈ [-4, 4]              @ /conv_features.7/AveragePool.avgpool
%11 = subgraph(%10)                                                                                                    # EncryptedTensor<int2, shape=(1, 64, 14, 14)>          ∈ [-1, 1]
%12 = [[[[ 0  1  ...   1 -1]]]]                                                                                        # ClearTensor<int2, shape=(128, 64, 3, 3)>              ∈ [-1, 1]              @ /conv_features.9/Conv.conv
%13 = conv2d(%11, %12, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int9, shape=(1, 128, 12, 12)>         ∈ [-151, 147]          @ /conv_features.9/Conv.conv
%14 = round_bit_pattern(%13, lsbs_to_remove=3)                                                                         # EncryptedTensor<int9, shape=(1, 128, 12, 12)>         ∈ [-152, 144]          @ /conv_features.9/Conv.conv_rounding
%15 = subgraph(%14)                                                                                                    # EncryptedTensor<int2, shape=(1, 128, 12, 12)>         ∈ [-1, 1]
%16 = [[[[ 0  1  ...   0 -1]]]]                                                                                        # ClearTensor<int2, shape=(128, 128, 3, 3)>             ∈ [-1, 1]              @ /conv_features.12/Conv.conv
%17 = conv2d(%15, %16, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int10, shape=(1, 128, 10, 10)>        ∈ [-238, 291]          @ /conv_features.12/Conv.conv
%18 = round_bit_pattern(%17, lsbs_to_remove=4)                                                                         # EncryptedTensor<int10, shape=(1, 128, 10, 10)>        ∈ [-240, 288]          @ /conv_features.12/Conv.conv_rounding
%19 = subgraph(%18)                                                                                                    # EncryptedTensor<int2, shape=(1, 128, 10, 10)>         ∈ [-1, 1]
%20 = [[[[1 1]   ...   [1 1]]]]                                                                                        # ClearTensor<uint1, shape=(128, 128, 2, 2)>            ∈ [0, 1]               @ /conv_features.15/AveragePool.avgpool
%21 = conv2d(%19, %20, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(2, 2), dilations=(1, 1), group=1)        # EncryptedTensor<int4, shape=(1, 128, 5, 5)>           ∈ [-4, 4]              @ /conv_features.15/AveragePool.avgpool
%22 = subgraph(%21)                                                                                                    # EncryptedTensor<int2, shape=(1, 128, 5, 5)>           ∈ [-1, 1]
%23 = [[[[ 0  0  ...   0 -1]]]]                                                                                        # ClearTensor<int2, shape=(256, 128, 3, 3)>             ∈ [-1, 1]              @ /conv_features.17/Conv.conv
%24 = conv2d(%22, %23, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int9, shape=(1, 256, 3, 3)>           ∈ [-181, 189]          @ /conv_features.17/Conv.conv
%25 = round_bit_pattern(%24, lsbs_to_remove=3)                                                                         # EncryptedTensor<int9, shape=(1, 256, 3, 3)>           ∈ [-184, 192]          @ /conv_features.17/Conv.conv_rounding
%26 = subgraph(%25)                                                                                                    # EncryptedTensor<int2, shape=(1, 256, 3, 3)>           ∈ [-1, 1]
%27 = [[[[-1  0  ...  -1 -1]]]]                                                                                        # ClearTensor<int2, shape=(256, 256, 3, 3)>             ∈ [-1, 1]              @ /conv_features.20/Conv.conv
%28 = conv2d(%26, %27, [0 0 0 0 0 ... 0 0 0 0 0], pads=[0, 0, 0, 0], strides=(1, 1), dilations=(1, 1), group=1)        # EncryptedTensor<int10, shape=(1, 256, 1, 1)>          ∈ [-295, 320]          @ /conv_features.20/Conv.conv
%29 = round_bit_pattern(%28, lsbs_to_remove=4)                                                                         # EncryptedTensor<int10, shape=(1, 256, 1, 1)>          ∈ [-288, 320]          @ /conv_features.20/Conv.conv_rounding
%30 = subgraph(%29)                                                                                                    # EncryptedTensor<int2, shape=(1, 256, 1, 1)>           ∈ [-1, 1]
%31 = reshape(%30, newshape=(1, 256))                                                                                  # EncryptedTensor<int2, shape=(1, 256)>                 ∈ [-1, 1]
%32 = [[-1  1  1 ... -1  1 -1]]                                                                                        # ClearTensor<int2, shape=(256, 512)>                   ∈ [-1, 1]              @ /linear_features.0/MatMul.matmul
%33 = matmul(%31, %32)                                                                                                 # EncryptedTensor<int8, shape=(1, 512)>                 ∈ [-99, 97]            @ /linear_features.0/MatMul.matmul
%34 = round_bit_pattern(%33, lsbs_to_remove=2)                                                                         # EncryptedTensor<int8, shape=(1, 512)>                 ∈ [-100, 96]           @ /linear_features.0/MatMul.matmul_rounding
%35 = subgraph(%34)                                                                                                    # EncryptedTensor<int2, shape=(1, 512)>                 ∈ [-1, 1]
%36 = [[ 1  1 -1 ... -1  1  1]]                                                                                        # ClearTensor<int2, shape=(512, 512)>                   ∈ [-1, 1]              @ /linear_features.3/MatMul.matmul
%37 = matmul(%35, %36)                                                                                                 # EncryptedTensor<int9, shape=(1, 512)>                 ∈ [-202, 210]          @ /linear_features.3/MatMul.matmul
%38 = round_bit_pattern(%37, lsbs_to_remove=3)                                                                         # EncryptedTensor<int9, shape=(1, 512)>                 ∈ [-200, 208]          @ /linear_features.3/MatMul.matmul_rounding
%39 = subgraph(%38)                                                                                                    # EncryptedTensor<int2, shape=(1, 512)>                 ∈ [-1, 1]
%40 = [[ 1 -1  1 ...  1  0  1]]                                                                                        # ClearTensor<int2, shape=(512, 10)>                    ∈ [-1, 1]              @ /linear_features.6/MatMul.matmul
%41 = matmul(%39, %40)                                                                                                 # EncryptedTensor<int10, shape=(1, 10)>                 ∈ [-333, 413]          @ /linear_features.6/MatMul.matmul
%42 = round_bit_pattern(%41, lsbs_to_remove=4)                                                                         # EncryptedTensor<int10, shape=(1, 10)>                 ∈ [-336, 416]          @ /linear_features.6/MatMul.matmul_rounding
%43 = subgraph(%42)                                                                                                    # EncryptedTensor<uint8, shape=(1, 10)>                 ∈ [0, 255]
return %43

Subgraphs:

    %4 = subgraph(%3):

         %0 = input                            # EncryptedTensor<int8, shape=(1, 64, 30, 30)>           @ /conv_features.1/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
         %6 = 0.0078125                        # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
         %8 = [[[[-0.054 ... 30265 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %10 = [[[[1.2737 ... 05686 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %12 = [[[[ 1.276 ... 37726 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %14 = [[[[ 1.969 ... 03e-01]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 64, 30, 30)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 30, 30)>
        return %33

    %8 = subgraph(%7):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 28, 28)>          @ /conv_features.4/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 64, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
         %8 = [[[[ 12.27 ... 37972 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %10 = [[[[36.185 ... 981493]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %12 = [[[[ 0.181 ... 41805 ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %14 = [[[[ 0.520 ... 8445  ]]]]        # ClearTensor<float32, shape=(1, 64, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 64, 28, 28)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 28, 28)>
        return %33

    %11 = subgraph(%10):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>          @ /conv_features.7/AveragePool.avgpool
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %2 = 0.25                             # ClearScalar<float64>
         %3 = multiply(%1, %2)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %4 = 0                                # ClearScalar<uint1>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%5, %6)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
         %8 = 1.0                              # ClearScalar<float32>
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %10 = 0.0                              # ClearScalar<float32>
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %12 = -1.0                             # ClearScalar<float64>
        %13 = 1.0                              # ClearScalar<float64>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %15 = rint(%14)                        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %16 = 0.0                              # ClearScalar<float32>
        %17 = subtract(%15, %16)               # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %18 = 1.0                              # ClearScalar<float32>
        %19 = multiply(%17, %18)               # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %20 = 1.0                              # ClearScalar<float64>
        %21 = divide(%19, %20)                 # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %22 = 0                                # ClearScalar<uint1>
        %23 = add(%21, %22)                    # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %24 = rint(%23)                        # EncryptedTensor<float64, shape=(1, 64, 14, 14)>
        %25 = astype(%24, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 64, 14, 14)>
        return %25

    %15 = subgraph(%14):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 12, 12)>          @ /conv_features.9/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
         %8 = [[[[-1.430 ... 54e+00]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %10 = [[[[13.482 ... 18581 ]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %12 = [[[[ 0.838 ... 08898 ]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %14 = [[[[ 3.091 ... 86e+00]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 128, 12, 12)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 12, 12)>
        return %33

    %19 = subgraph(%18):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 10, 10)>          @ /conv_features.12/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 128, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
         %8 = [[[[  33.4 ... 4747  ]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %10 = [[[[17.874 ... 987757]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %12 = [[[[ 1.487 ... 1099  ]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %14 = [[[[-0.138 ... 33695 ]]]]        # ClearTensor<float32, shape=(1, 128, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 128, 10, 10)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 10, 10)>
        return %33

    %22 = subgraph(%21):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 128, 5, 5)>          @ /conv_features.15/AveragePool.avgpool
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
         %2 = 0.25                             # ClearScalar<float64>
         %3 = multiply(%1, %2)                 # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
         %4 = 0                                # ClearScalar<uint1>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%5, %6)                 # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
         %8 = 1.0                              # ClearScalar<float32>
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %10 = 0.0                              # ClearScalar<float32>
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %12 = -1.0                             # ClearScalar<float64>
        %13 = 1.0                              # ClearScalar<float64>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %15 = rint(%14)                        # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %16 = 0.0                              # ClearScalar<float32>
        %17 = subtract(%15, %16)               # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %18 = 1.0                              # ClearScalar<float32>
        %19 = multiply(%17, %18)               # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %20 = 1.0                              # ClearScalar<float64>
        %21 = divide(%19, %20)                 # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %22 = 0                                # ClearScalar<uint1>
        %23 = add(%21, %22)                    # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %24 = rint(%23)                        # EncryptedTensor<float64, shape=(1, 128, 5, 5)>
        %25 = astype(%24, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 128, 5, 5)>
        return %25

    %26 = subgraph(%25):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 3, 3)>          @ /conv_features.17/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
         %8 = [[[[  2.56 ... 60726 ]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %10 = [[[[23.168 ... 344398]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %12 = [[[[ 2.103 ... 57e+00]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %14 = [[[[ 3.110 ... 39e-01]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 256, 3, 3)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 3, 3)>
        return %33

    %30 = subgraph(%29):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 256, 1, 1)>          @ /conv_features.20/Conv.conv_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
         %4 = [[[[0]]  [ ... ]  [[0]]]]        # ClearTensor<uint1, shape=(1, 256, 1, 1)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
         %8 = [[[[ 1.129 ... 08e+01]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %10 = [[[[48.603 ... 126133]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %12 = [[[[2.2961 ... 161855]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %14 = [[[[-0.770 ... 11255 ]]]]        # ClearTensor<float32, shape=(1, 256, 1, 1)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 256, 1, 1)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 256, 1, 1)>
        return %33

    %35 = subgraph(%34):

         %0 = input                            # EncryptedTensor<uint9, shape=(1, 512)>          @ /linear_features.0/MatMul.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 512)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512)>
         %8 = [[ 2.46694 ... 1598e+00]]        # ClearTensor<float32, shape=(1, 512)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 512)>
        %10 = [[20.25471 ... 2.063683]]        # ClearTensor<float32, shape=(1, 512)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 512)>
        %12 = [[1.005982 ... 076675  ]]        # ClearTensor<float32, shape=(1, 512)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 512)>
        %14 = [[ 7.63531 ... 9430e+00]]        # ClearTensor<float32, shape=(1, 512)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 512)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 512)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 512)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 512)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 512)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 512)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 512)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 512)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 512)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 512)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512)>
        return %33

    %39 = subgraph(%38):

         %0 = input                            # EncryptedTensor<uint10, shape=(1, 512)>         @ /linear_features.3/MatMul.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 512)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 512)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 512)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 512)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 512)>
         %8 = [[-3.85795 ... 6868e+00]]        # ClearTensor<float32, shape=(1, 512)>
         %9 = subtract(%7, %8)                 # EncryptedTensor<float64, shape=(1, 512)>
        %10 = [[46.30737 ... 3.93799 ]]        # ClearTensor<float32, shape=(1, 512)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 512)>
        %12 = [[3.394929 ... 9607073 ]]        # ClearTensor<float32, shape=(1, 512)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 512)>
        %14 = [[-1.02642 ... 0538e-01]]        # ClearTensor<float32, shape=(1, 512)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 512)>
        %16 = 1.0                              # ClearScalar<float32>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 512)>
        %18 = 0.0                              # ClearScalar<float32>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 512)>
        %20 = -1.0                             # ClearScalar<float64>
        %21 = 1.0                              # ClearScalar<float64>
        %22 = clip(%19, %20, %21)              # EncryptedTensor<float64, shape=(1, 512)>
        %23 = rint(%22)                        # EncryptedTensor<float64, shape=(1, 512)>
        %24 = 0.0                              # ClearScalar<float32>
        %25 = subtract(%23, %24)               # EncryptedTensor<float64, shape=(1, 512)>
        %26 = 1.0                              # ClearScalar<float32>
        %27 = multiply(%25, %26)               # EncryptedTensor<float64, shape=(1, 512)>
        %28 = 1.0                              # ClearScalar<float64>
        %29 = divide(%27, %28)                 # EncryptedTensor<float64, shape=(1, 512)>
        %30 = 0                                # ClearScalar<uint1>
        %31 = add(%29, %30)                    # EncryptedTensor<float64, shape=(1, 512)>
        %32 = rint(%31)                        # EncryptedTensor<float64, shape=(1, 512)>
        %33 = astype(%32, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 512)>
        return %33

    %43 = subgraph(%42):

         %0 = input                            # EncryptedTensor<uint10, shape=(1, 10)>         @ /linear_features.6/MatMul.matmul_rounding
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 10)>
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 10)>
         %4 = [[0 0 0 0 0 0 0 0 0 0]]          # ClearTensor<uint1, shape=(1, 10)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 10)>
         %6 = 1.0                              # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 10)>
         %8 = [3.1062393]                      # ClearTensor<float32, shape=(1,)>
         %9 = add(%7, %8)                      # EncryptedTensor<float64, shape=(1, 10)>
        %10 = [121.21355438]                   # ClearTensor<float64, shape=(1,)>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 10)>
        %12 = [4.618495]                       # ClearTensor<float32, shape=(1,)>
        %13 = multiply(%11, %12)               # EncryptedTensor<float64, shape=(1, 10)>
        %14 = [-2.651246]                      # ClearTensor<float32, shape=(1,)>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 10)>
        %16 = 0.10832959422250323              # ClearScalar<float64>
        %17 = divide(%15, %16)                 # EncryptedTensor<float64, shape=(1, 10)>
        %18 = 132                              # ClearScalar<uint8>
        %19 = add(%17, %18)                    # EncryptedTensor<float64, shape=(1, 10)>
        %20 = rint(%19)                        # EncryptedTensor<float64, shape=(1, 10)>
        %21 = 0                                # ClearScalar<uint1>
        %22 = 255                              # ClearScalar<uint8>
        %23 = clip(%20, %21, %22)              # EncryptedTensor<float64, shape=(1, 10)>
        %24 = astype(%23, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 10)>
        return %24